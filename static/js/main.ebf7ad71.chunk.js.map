{"version":3,"sources":["logo.svg","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","this","props","monster","id","name","email","className","alt","src","Component","CardList","monsters","map","SearchBox","type","placeholder","onChange","onChangeHandler","App","onSearchChange","event","searchField","target","value","toLocaleLowerCase","setState","state","fetch","then","response","json","users","filteredMonsters","filter","toLowerCase","includes","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render"],"mappings":"2SAAe,I,kBCGTA,EAAI,kHAaP,OAbO,mCACR,WACE,MAA4BC,KAAKC,MAAMC,QAA/BC,EAAE,EAAFA,GAAIC,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAClB,OACE,sBAAKC,UAAU,iBAAgB,UAC7B,qBACEC,IAAI,UACJC,IAAG,+BAA0BL,EAAE,4BAEjC,6BAAKC,IACL,4BAAIC,MAN+BF,EASzC,KAAC,EAbO,CAASM,aAgBJV,ICfTW,EAAQ,kHAUX,OAVW,mCACZ,WACE,IAAQC,EAAaX,KAAKC,MAAlBU,SACR,OACE,qBAAKL,UAAU,YAAW,SACvBK,EAASC,KAAI,SAACV,GACb,OAAO,cAAC,EAAI,CAACA,QAASA,GACxB,KAGN,KAAC,EAVW,CAASO,aAaRC,ICdTG,G,MAAS,kHAUZ,OAVY,mCACb,WACE,OACE,uBACEP,UAAS,qBAAgBN,KAAKC,MAAMK,WACpCQ,KAAK,SACLC,YAAaf,KAAKC,MAAMc,YACxBC,SAAUhB,KAAKC,MAAMgB,iBAG3B,KAAC,EAVY,CAASR,cAaTI,ICsCAK,G,MA/CN,kDACP,aAAe,IAAD,EAKV,OALU,qBACZ,gBAgBFC,eAAiB,SAACC,GAChB,IAAMC,EAAcD,EAAME,OAAOC,MAAMC,oBACvC,EAAKC,UAAS,WACZ,MAAO,CAAEJ,cACX,GACF,EApBE,EAAKK,MAAQ,CACXf,SAAU,GACVU,YAAa,IACb,CACJ,CAqCC,OApCD,8CACA,WAAqB,IAAD,OAClBM,MAAM,8CACHC,MAAK,SAACC,GAAQ,OAAKA,EAASC,MAAM,IAClCF,MAAK,SAACG,GAAK,OACV,EAAKN,UAAS,WACZ,MAAO,CAAEd,SAAUoB,EACrB,GAAE,GAER,GAAC,oBAQD,WACE,MAAkC/B,KAAK0B,MAA/Bf,EAAQ,EAARA,SAAUU,EAAW,EAAXA,YACVF,EAAmBnB,KAAnBmB,eACFa,EAAmBrB,EAASsB,QAAO,SAAC/B,GACxC,OAAOA,EAAQE,KAAK8B,cAAcC,SAASd,EAC7C,IAGA,OAFAe,QAAQC,IAAI,oBAAqBL,GAG/B,sBAAK1B,UAAU,MAAK,UAClB,oBAAIA,UAAU,YAAW,SAAC,oBAC1B,cAAC,EAAS,CACRW,gBAAiBE,EACjBJ,YAAY,kBACZT,UAAU,uBAEZ,cAAC,EAAQ,CAACK,SAAUqB,MAG1B,KAAC,EA5CM,CAASvB,cCKH6B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,EACV,GAEJ,ECJaO,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,mCACE,cAAC,EAAG,OAORZ,G","file":"static/js/main.ebf7ad71.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { Component } from \"react\";\r\nimport \"./card.styles.css\";\r\n\r\nclass Card extends Component {\r\n  render() {\r\n    const { id, name, email } = this.props.monster;\r\n    return (\r\n      <div className=\"card-container\" key={id}>\r\n        <img\r\n          alt=\"monster\"\r\n          src={`https://robohash.org/${id}?set=set2&size=180x180`}\r\n        />\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import { Component } from \"react\";\r\nimport \"./card-list.styles.css\";\r\nimport Card from \"../card/card.component\";\r\n\r\nclass CardList extends Component {\r\n  render() {\r\n    const { monsters } = this.props;\r\n    return (\r\n      <div className=\"card-list\">\r\n        {monsters.map((monster) => {\r\n          return <Card monster={monster} />;\r\n        })}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardList;\r\n","import { Component } from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nclass SearchBox extends Component {\r\n  render() {\r\n    return (\r\n      <input\r\n        className={`search-box ${this.props.className}`}\r\n        type=\"search\"\r\n        placeholder={this.props.placeholder}\r\n        onChange={this.props.onChangeHandler}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBox;\r\n","import logo from \"./logo.svg\";\nimport { Component } from \"react\";\nimport CardList from \"./components/card-list/card-list.component\";\nimport SearchBox from \"./components/search-box/search-box.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  // this method is called after the component is rendered for the first time\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) =>\n        this.setState(() => {\n          return { monsters: users };\n        })\n      );\n  }\n  onSearchChange = (event) => {\n    const searchField = event.target.value.toLocaleLowerCase();\n    this.setState(() => {\n      return { searchField };\n    });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const { onSearchChange } = this;\n    const filteredMonsters = monsters.filter((monster) => {\n      return monster.name.toLowerCase().includes(searchField);\n    });\n    console.log(\"filtered Monsters\", filteredMonsters);\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"app-title\">Monster Rolodex</h1>\n        <SearchBox\n          onChangeHandler={onSearchChange}\n          placeholder=\"search monsters\"\n          className=\"monster-search-box\"\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <>\n    <App />\n  </>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}